#!/usr/bin/ruby

@gem_dir = File.expand_path(File.dirname(__FILE__) + '/..')

$: << File.join(@gem_dir, 'lib')

require 'fileutils'
require File.join(@gem_dir, 'lib', 'epubbery')

@epub = Epubbery::Epub.new

if ARGV[0]
  @destination = ARGV[0]
  @base_dir = File.expand_path(File.dirname(__FILE__) + '/..')
  
  puts "Creating templates..."
  FileUtils.mkdir_p @destination
  puts "Copying necessary files..."
  FileUtils.cp_r File.join(@base_dir, 'templates'), @destination
  FileUtils.cp File.join(@base_dir, 'config_sample.yml'), File.join(@destination, 'config.yml')
  
  puts "Done! Go to #{@destination} and edit config.yml and then run epubbery from that directory."
elsif File.exist?('config.yml')
  @config = YAML::load(File.read('config.yml'))
  @epub_folder = File.join(Dir.getwd, @config[:temp_epub_folder])
  
  @book = Book.new @config[:book_title], @config[:author]
  @book.chapters = Epubbery::Epub.read_chapters(@config[:chapter_glob])
 
  # # uncomment to actually write temp rendered html files
  # @epub.make_skeleton Dir.getwd, @epub_folder, @config[:default_template]
  # @epub.write_templates(@book)
  
  FileUtils.rm @config[:file_name] if File.exists?(@config[:file_name])
  
  puts "\nGenerating #{@config[:file_name]}"
 
  @epub.load_file_templates(Dir.getwd, @config[:default_template])
  @epub.create_zip(@book, @config[:file_name])

  puts "\nRunning epubcheck..."
  system "java -jar #{@config[:epubcheck]} #{@config[:file_name]}"
else
  puts "USAGE:\n"
  puts "To create a new epubbery project, run:"
  puts "    epubbery /path/to/new/epub/project\n"
  puts "To generate an epub from inside an epubbery project, run:"
  puts "    epubbery"
  puts "(a config.yml file is required in the same directory)"
  exit
end

